local ARP = require ( script.Parent.Parent.src.ARP_m )

-- I haven't tested it yet but im pretty sure everything works other than the jms and ret calls
-- Writing the test on here is hard even with easy text input. Imagine the punch card binary programmers back then

local function main ()
	ARP:init ()
	
	ARP:tabWrite (
		{
			{ 0xff, 0x01, 0x25 },	-- AC register testing / LDA / STA / GTA
			{ 0x101, 0x02, 0x300 },
			{ 0x103, 0x03, 0x300 },
			
			{ 0x105, 0x04, 0xff },	-- X register resting / LDX / STX / GTX
			{ 0x107, 0x05, 0x301 },
			{ 0x109, 0x06, 0x301 },
			
			{ 0x10B, 0x07, 0x00 },	-- Reg transfers
			{ 0x10D, 0x08, 0x00 },
			
			{ 0x10F, 0x09, 0x00 }, -- Stack
				{ 0x111, 0x04, 0x00 },
			{ 0x113, 0x0A, 0x00 },
			{ 0x115, 0x0B, 0x00 },
			{ 0x117, 0x0C, 0x00 },
			
			{ 0x119, 0x0D, 0xff }, -- Arithemetic
			{ 0x11B, 0x0E, 0x0A },
			{ 0x11D, 0x0F, 0x300 },
			{ 0x11F, 0x10, 0x301 },
			
			{ 0x121, 0x11, 0x00 }, -- Comparison
			{ 0x123, 0x12, 0x10 },
			{ 0x125, 0x13, 0x301 },
			{ 0x137, 0x14, 0x300 },
			
			
			{ 0x139, 0x01, 0x01 },
			{ 0x13B, 0x12, 0x01 },
			
			{ 0x139, 0x17, 0x300 },
			{ 0x300, 0x18, 0x400 },
			
			--FUNC
			{ 0x400, 0x01, 0xff },
			{ 0x402, 0x02, 0xff },
			{ 0x404, 0x1A, 0x00 }
		}
	)
	
	ARP:dbExec ( 0x1F, 0xf1 )
end
main ()